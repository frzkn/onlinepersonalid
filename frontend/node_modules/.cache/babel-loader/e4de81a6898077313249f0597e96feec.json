{"ast":null,"code":"import _slicedToArray from \"/home/frzkn/hackathon/frontend/react/online-personal-id/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/frzkn/hackathon/frontend/react/online-personal-id/src/components/Photo.js\";\nimport React from 'react';\n\nfunction Photo() {\n  const _React$useState = React.useState(''),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        states = _React$useState2[0],\n        setStates = _React$useState2[1];\n\n  const _React$useState3 = React.useState(false),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        loader = _React$useState4[0],\n        setLoader = _React$useState4[1];\n\n  const _React$useState5 = React.useState(false),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        show = _React$useState6[0],\n        toggleShow = _React$useState6[1];\n\n  return React.createElement(\"section\", {\n    class: \"browser\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"Reverse Searching Google Images\"), React.createElement(\"div\", {\n    class: \"browser-content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    class: \"upper-light\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, \"Google Crawler to find domain links of uploaded Images.\"), React.createElement(\"div\", {\n    class: \"file-row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    class: \"image\",\n    type: \"file\",\n    name: \"image\",\n    accept: \"image/*\",\n    disabled: loader,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"google-btn\",\n    disabled: loader,\n    onClick: () => {\n      let a = document.querySelector('.image').files[0];\n\n      if (a) {\n        if (show) {\n          toggleShow(false);\n        }\n\n        setLoader(true);\n        let data = new FormData();\n        data.append('image', a);\n        fetch('//localhost:3001/google', {\n          method: 'POST',\n          body: data\n        }).then((data, err) => data.text()).then(dta => {\n          setStates(JSON.parse(dta).data);\n          toggleShow(true);\n          setLoader(false);\n        });\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"Upload\"))), loader && React.createElement(\"span\", {\n    className: \"loader\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    class: \"google-search-results\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, show && React.createElement(React.Fragment, null, React.createElement(\"p\", {\n    class: \"table-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"TOP DOMAINS\"), React.createElement(\"p\", {\n    className: \"table-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"RESULTS\")), show && states && states.map(i => {\n    return [React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, i.name), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, i.status)];\n  })));\n}\n\nexport default Photo;","map":{"version":3,"sources":["/home/frzkn/hackathon/frontend/react/online-personal-id/src/components/Photo.js"],"names":["React","Photo","useState","states","setStates","loader","setLoader","show","toggleShow","a","document","querySelector","files","data","FormData","append","fetch","method","body","then","err","text","dta","JSON","parse","map","i","name","status"],"mappings":"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","sourcesContent":["import React from 'react'\n\nfunction Photo() {\n  const [states, setStates] = React.useState('')\n  const [loader, setLoader] = React.useState(false)\n  const [show, toggleShow] = React.useState(false)\n\n  return (\n    <section class=\"browser\">\n      <h1>Reverse Searching Google Images</h1>\n      <div class=\"browser-content\">\n        <p class=\"upper-light\">\n          Google Crawler to find domain links of uploaded Images.\n        </p>\n        <div class=\"file-row\">\n          <input\n            class=\"image\"\n            type=\"file\"\n            name=\"image\"\n            accept=\"image/*\"\n            disabled={loader}\n          />\n          <button\n            className=\"google-btn\"\n            disabled={loader}\n            onClick={() => {\n              let a = document.querySelector('.image').files[0]\n              if (a) {\n                if (show) {\n                  toggleShow(false)\n                }\n                setLoader(true)\n                let data = new FormData()\n                data.append('image', a)\n\n                fetch('//localhost:3001/google', {\n                  method: 'POST',\n                  body: data\n                })\n                  .then((data, err) => data.text())\n                  .then((dta) => {\n                    setStates(JSON.parse(dta).data)\n                    toggleShow(true)\n                    setLoader(false)\n                  })\n              }\n            }}\n          >\n            Upload\n          </button>\n        </div>\n      </div>\n\n      {loader && <span className=\"loader\"></span>}\n      <div class=\"google-search-results\">\n        {show && (\n          <>\n            <p class=\"table-title\">TOP DOMAINS</p>\n            <p className=\"table-title\">RESULTS</p>\n          </>\n        )}\n\n        {show &&\n          states &&\n          states.map((i) => {\n            return [<p>{i.name}</p>, <p>{i.status}</p>]\n          })}\n      </div>\n    </section>\n  )\n}\n\nexport default Photo\n"]},"metadata":{},"sourceType":"module"}